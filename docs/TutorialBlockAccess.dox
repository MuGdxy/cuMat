namespace cuMat {

/** \page TutorialBlockAccess Matrix Blocks and Slices

This tutorial explains how to use block operations. A block is a rectangular part (3D: rows, columsn, batches) of a matrix. Block expressions can be used both as rvalues and lvalues.

\section Blocks General block operations

The most general block operation in cuMat is called \link MatrixBase::block() .block() \endlink.
There are two versions, whose syntax is as follows:

<table>
<tr><th>\b %Block \b operation</td>
<th>Version constructing a \n dynamic-size block expression</th>
<th>Version constructing a \n fixed-size block expression</th></tr>
<tr><td>%Block of size <tt>(p,q,r)</tt>, starting at <tt>(i,j,k)</tt></td>
    <td>\code
matrix.block(i,j,k,p,q,r);\endcode </td>
    <td>\code 
matrix.block<p,q,r>(i,j,k);\endcode </td>
</tr>
</table>

Block operations can be used on any matrix expressions.
This means, something like \code (matrix1 + matrix2).block<1,1,1>(0,0,0) \endcode evalutes and returns only the entry at index 0,0,0.

Further, block expressions can be used as lvalues as well. This, however, is only available on dense matrices (no matrix expression).
<table>
<tr><th>Example:</th><th>Output:</th></tr>
<tr><td>
\include TutorialBlocks_lvalue.cu
</td>
<td>
\verbinclude TutorialBlocks_lvalue.out
</td></tr></table>

\section Slices Specializations: slices

\note TODO

\section Vectors Specializations: vectors

\note TODO


*/

}